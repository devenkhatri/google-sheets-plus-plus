import { it } from 'node:test';
import { describe } from 'node:test';
import { it } from 'node:test';
import { describe } from 'node:test';
import { describe } from 'node:test';
import { sanitizeInput, sanitizeSqlInput } from '../../middleware/inputSanitizer';

// Simple test for input sanitization
describe('Input Sanitization', () => {
  describe('sanitizeInput', () => {
    it('should sanitize XSS payloads', () => {
      // Create mock request object
      const req = {
        body: {
          name: 'Test <script>alert("XSS")</script> Name',
          description: '<img src="x" onerror="alert(\'XSS\')">',
          nested: {
            html: '<a href="javascript:alert(\'XSS\')">Click me</a>',
          },
        },
        query: {},
        params: {},
      };
      
      // Create mock response and next function
      const res = {};
      const next = jest.fn();
      
      // Call sanitizeInput middleware
      sanitizeInput(req as any, res as any, next);
      
      // Check that script tags and event handlers are removed
      expect(req.body.name).not.toContain('<script>');
      expect(req.body.description).not.toContain('onerror=');
      expect(req.body.nested.html).not.toContain('javascript:');
      
      // Check that next was called
      expect(next).toHaveBeenCalled();
    });
  });
  
  describe('sanitizeSqlInput', () => {
    it('should sanitize SQL injection attempts', () => {
      // Create mock request object
      const req = {
        query: {
          id: '1 OR 1=1; DROP TABLE users;--',
          filter: 'UNION SELECT username,password FROM users',
        },
        params: {
          id: '1; DELETE FROM users;',
        },
      };
      
      // Create mock response and next function
      const res = {};
      const next = jest.fn();
      
      // Call sanitizeSqlInput middleware
      sanitizeSqlInput(req as any, res as any, next);
      
      // Check that SQL keywords are removed
      expect(req.query.id).not.toContain('OR 1=1');
      expect(req.query.id).not.toContain('DROP TABLE');
      expect(req.query.filter).not.toContain('UNION SELECT');
      expect(req.params.id).not.toContain('DELETE FROM');
      
      // Check that next was called
      expect(next).toHaveBeenCalled();
    });
  });
});