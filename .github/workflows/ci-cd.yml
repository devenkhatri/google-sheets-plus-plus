name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: airtable_clone_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Lint Backend
        working-directory: ./backend
        run: npm run lint
      
      - name: Test Backend
        working-directory: ./backend
        run: npm test
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: airtable_clone_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret
      
      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Lint Frontend
        working-directory: ./frontend
        run: npm run lint
      
      - name: Test Frontend
        working-directory: ./frontend
        run: npm test -- --run
        env:
          NODE_ENV: test
  
  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/airtable-clone-backend:latest,${{ secrets.DOCKERHUB_USERNAME }}/airtable-clone-backend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/airtable-clone-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/airtable-clone-backend:buildcache,mode=max
      
      - name: Build and push Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/airtable-clone-frontend:latest,${{ secrets.DOCKERHUB_USERNAME }}/airtable-clone-frontend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/airtable-clone-frontend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/airtable-clone-frontend:buildcache,mode=max
  
  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
      
      - name: Deploy to Staging Server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd /opt/airtable-clone
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d
            docker system prune -af
          EOF
  
  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
      
      - name: Deploy to Production Server (Blue-Green)
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd /opt/airtable-clone
            
            # Determine current environment (blue or green)
            if [ -f ".env.current" ]; then
              CURRENT_ENV=$(cat .env.current)
            else
              CURRENT_ENV="blue"
              echo "blue" > .env.current
            fi
            
            # Set target environment (opposite of current)
            if [ "$CURRENT_ENV" = "blue" ]; then
              TARGET_ENV="green"
            else
              TARGET_ENV="blue"
            fi
            
            echo "Current environment: $CURRENT_ENV"
            echo "Target environment: $TARGET_ENV"
            
            # Pull latest images
            docker-compose -f docker-compose.prod.$TARGET_ENV.yml pull
            
            # Start new environment
            docker-compose -f docker-compose.prod.$TARGET_ENV.yml up -d
            
            # Wait for new environment to be ready
            echo "Waiting for new environment to be ready..."
            sleep 30
            
            # Check health of new environment
            HEALTH_CHECK=$(curl -s http://localhost:$TARGET_ENV_PORT/health)
            if [[ $HEALTH_CHECK == *"healthy"* ]]; then
              echo "New environment is healthy, switching traffic..."
              
              # Update nginx config to point to new environment
              sed -i "s/proxy_pass http:\/\/localhost:$CURRENT_ENV_PORT/proxy_pass http:\/\/localhost:$TARGET_ENV_PORT/g" /etc/nginx/sites-available/airtable-clone
              nginx -s reload
              
              # Update current environment marker
              echo "$TARGET_ENV" > .env.current
              
              # Stop old environment after a grace period
              echo "Stopping old environment after grace period..."
              sleep 60
              docker-compose -f docker-compose.prod.$CURRENT_ENV.yml down
              
              echo "Deployment completed successfully!"
            else
              echo "New environment is not healthy, rolling back..."
              docker-compose -f docker-compose.prod.$TARGET_ENV.yml down
              echo "Deployment failed!"
              exit 1
            fi
            
            # Clean up
            docker system prune -af
          EOF